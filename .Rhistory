g <- ggplot(movies$rating, aes(votes))
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
c(40:1)
40:1
1:40
mydata <- data.frame(x = 1:5)
mydata.new < -mydata
mydata.new <- mydata
mydata.new$x2 <- mydata.new$x ^ 2
mydata.new
mydata.new$x3 <- mydata.new$x2 + 100
mydata.new
mydata.new <- transform(mydata, x2 = x ^ 2)
mydata.new
qnorm(0.95, 1100, 75)
qnorm(0.95, 1100, 7.5)
7/32
2^5
6/32
ppois(10, 5)
ppois(10, 15)
q = c(0:10)
q
ppois(q, 15)
sum(ppois(q, 15))
ppois(0, 15)
ppois(15, 15)
ppois(20, 15)
dpois(15,15)
dpois(0,15)
sum(dpois(q, 15))
rnorm(1000*10)
rnorm(10)
rnorm(10*1000)
matrix(rnorm(1000*10),1000)
m<-matrix(rnorm(1000*10),1000)
length(m)
dim(m)
m<-matrix(rnorm(100*10),100)
m
rnorm(100*10)
m<-matrix(rnorm(100*10),100)
m
dim(rnorm(1000*10))
dim(rnorm(1000*10))
rnorm(1000*10)
nrow(rnorm(1000*10))
NROW(rnorm(1000*10))
NCOL(rnorm(1000*10))
matrix(2,2)
matrix(2,1)
matrix(2,3)
matrix(2,1000)
SD(1,21,41,25134,)
sd(1,21,41,25134,)
sd(1,21,41,25134,121)
sd(c(1,21,41,25134,121))
sd(c(2,2,2,2,2))
sd(c(2,3,2,2,2))
sd(c(2,3,4,2,2))
sd(c(2,3,4,2,3))
sd(c(2,3,4,4,3))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x*w
x - 0.0025
(x - 0.0025)^2
sum(w*(x - 0.0025)^2)
sum(w*(x - 0.300)^2)
sum(w*(x - 1.1471)^2)
sum(w*(x - 1.077)^2)
sum(w*(x - 0.1471)^2)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
sd(x)
x - mean(x)
(x - mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x ~ y)
lm(y ~ x)
x-mean(0.573)
(x-mean(0.573))^2
sum((x-mean(0.573))^2)
sum((x-0.36)^2)
sum((x-0.44)^2)
sum((x-0.573)^2)
sum((x-0.8)^2)
data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
using(R)
(UsingR)
library(UsingE)
library(UsingR)
library(UsingR)
install.packages(usingR)
"UsingR"
install.packages(usingR)
library(UsingR)
install.packages("UsingR")
data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
library(UsingR)
version
library(UsingR)
data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 1.1, pch = 21,frame = FALSE)
abline(fit, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(y[i], yhat[i]), col = "red" , lwd = 2)
plot(diamond$carat, e,
xlab = "Mass (carats)",
ylab = "Residuals (SIN $)",
bg = "lightblue",
col = "black", cex = 1.1, pch = 21,frame = FALSE)
abline(h = 0, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(e[i], 0), col = "red" , lwd = 2)
x <- runif(100, 0, 6); y <- x + rnorm(100,  mean = 0, sd = .001 * x);
plot(x, y); abline(lm(y ~ x))
x
plot(x, resid(lm(y ~ x)));
abline(h = 0)
resid(lm(y ~ x))
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
UsingR::
install.packages('manipulate')
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
usingR('galton')
install.packages(']')
install.packages('galton')
I ?
exit
I()?
exit
I function
usingR(Daimaond)
library(UsingR); data(diamond)
I(carat - mean(carat
)
exit
I(carat - mean(carat))
fit <- lm(price ~ carat, data = diamond)
lm(price ~ I(carat - mean(carat))
exit
lm(price ~ I(carat - mean(carat)))
fit2 <- lm(price ~ I(carat - mean(carat)), data = diamond)
fit2 <- lm(price ~ (carat - mean(carat)), data = diamond)
fit2 <- lm(price ~ I(carat - mean(carat)), data = diamond)
I(carat - mean(carat))
a <- [1,2]
a <- 1
a <- {1,2}
a <- list(1,2)
a
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages(Caret)
install.packages("caret")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages("AppliedPredictiveModeling")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.8)
preObj
data(diamond)
dir
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
segmentationOriginal
str(segmentationOriginal)
training<- subset(segmentationOriginal,Case=="Train")
testing<- subset(segmentationOriginal,Case=="Test")
set.seed(125)
modelFit<- train(Class~.,data=training,method="rpart")
install.packages("rpart")
install.packages("rpart")
modelFit<- train(Class~.,data=training,method="rpart")
training<- subset(segmentationOriginal,Case=="Train")
testing<- subset(segmentationOriginal,Case=="Test")
set.seed(125)
modelFit<- train(Class~.,data=training,method="rpart")
library(caret)
modelFit<- train(Class~.,data=training,method="rpart")
install.packages("e1071")
modelFit<- train(Class~.,data=training,method="rpart")
modelFit$finalModel
library(pgmm)
data(olive)
install.packages("pgmm")
library(pgmm)
data(olive)
str(olive)
t(colMeans(olive))
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
training <- read.csv(url(trainUrl), na.strings=c("NA"))
str(training)
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
myTraining <- training[inTrain, ]; myTesting <- training[-inTrain, ]
dim(myTraining); dim(myTesting)
library(caret)
library(caret)
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
myTraining <- training[inTrain, ]; myTesting <- training[-inTrain, ]
dim(myTraining); dim(myTesting)
title: "Prediction Assignment Writeup"
author: "Min-Jung Wang"
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
library(caret)
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
myTraining <- training[inTrain, ]; myTesting <- training[-inTrain, ]
dim(myTraining); dim(myTesting)
library(rpart)
training <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!",""))
testing <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""))
myTraining <- training[inTrain, ]; myTesting <- training[-inTrain, ]
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
myTraining <- training[inTrain, ]; myTesting <- training[-inTrain, ]
dim(myTraining); dim(myTesting)
str(inTrain)
inTrain
str(myTraining)
myDataNZV <- nearZeroVar(myTraining, saveMetrics=TRUE)
myDataNZV
dim(myDataNZV)
dim(myTraining)
str(myTraining)
myDataNZV$kurtosis_roll_arm
names(myTraining)
Length(ames(myTraining))
length(ames(myTraining))
length(names(myTraining))
length(names(myDataNZV))
str(myDataNZV)
myDataNZV
row.names(myDataNZV)
length(row.names(myDataNZV))
length(row.names(myTraining))
row.names(myTraining)
names(myTraining)
myDataNZV
train_data <- train_data[-myDataNZV]
myTrain <- myTraining[-myDataNZV]
nsv <- nearZeroVar(myTraining)
nsv
myTraining
str(myTraining)
install.packages("randomForest")
testData <- read.csv(url(testURL), na.strings=c("", "NA","#DIV/0!"," "))
testURL <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testData <- read.csv(url(testURL), na.strings=c("", "NA","#DIV/0!"," "))
str(testData)
trainURL <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainData <- read.csv(url(trainURL), na.strings=c("", "NA","#DIV/0!"," "))
names(testData)
modFitLR <- glm(classe ~.,  data=myTrainData, family=binomial )
install.packages("rattle")
install.packages("rattle")
library(rattle)
library(rattle)
install.packages(rpart.plot)
install.packages(rpart.plot)
install.packages(rpart)
install.packages("rpart.plot)
""
)
sasdfa
sdfsdfsd
;
exit
install.packages("rpart.plot")
install.packages("rpart.plot")
library(rpart.plot)
---
trainURL <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainData <- read.csv(url(trainURL), na.strings=c("", "NA","#DIV/0!"," "))
testData <- read.csv(url(testURL), na.strings=c("", "NA","#DIV/0!"," "))
str(trainData)
inTrainIndex <- createDataPartition(trainData$classe, p=0.7, list=FALSE)
myTrainData <- trainData[inTrainIndex, ]
myTestData <- trainData[-inTrainIndex, ]
dim(myTrainData)
dim(myTestData)
inTrainIndex <- createDataPartition(trainData$classe, p=0.7, list=FALSE)
suppressWarnings(library(caret))
suppressWarnings(library(rpart))
suppressWarnings(library(randomForest))
library(rpart.plot)
library(rattle)
set.seed(12345)
inTrainIndex <- createDataPartition(trainData$classe, p=0.7, list=FALSE)
myTrainData <- trainData[inTrainIndex, ]
myTestData <- trainData[-inTrainIndex, ]
dim(myTrainData)
dim(myTestData)
myTrainData$X <- NULL
myTrainData$user_name <- NULL
myTrainData$raw_timestamp_part_1 <- NULL
myTrainData$raw_timestamp_part_2 <- NULL
myTrainData$cvtd_timestamp <- NULL
myTestData$X <- NULL
myTestData$user_name <- NULL
myTestData$raw_timestamp_part_1 <- NULL
myTestData$raw_timestamp_part_2 <- NULL
myTestData$cvtd_timestamp <- NULL
NAsRate <- apply(myTrainData,2,function(x) {mean(is.na(x))})
myTrainData <- myTrainData[,which(NAsRate >= 0.90 )]
myTestData <- myTestData[,which(NAsRate >= 0.90 )]
str(myTrainData)
inTrainIndex <- createDataPartition(trainData$classe, p=0.7, list=FALSE)
myTrainData <- trainData[inTrainIndex, ]
myTestData <- trainData[-inTrainIndex, ]
myTrainData$X <- NULL
myTrainData$user_name <- NULL
myTrainData$raw_timestamp_part_1 <- NULL
myTrainData$raw_timestamp_part_2 <- NULL
myTrainData$cvtd_timestamp <- NULL
myTestData$X <- NULL
myTestData$user_name <- NULL
myTestData$raw_timestamp_part_1 <- NULL
myTestData$raw_timestamp_part_2 <- NULL
myTestData$cvtd_timestamp <- NULL
NAsRate <- apply(myTrainData,2,function(x) {mean(is.na(x))})
NAsRate
which(NAsRate >= 0.90 )
NAsRate
str(myTrainData)
NAsRate
myTrainData <- myTrainData[,which(NAsRate >= 0.90 )]
myTestData <- myTestData[,which(NAsRate >= 0.90 )]
myTrainData
source('D:/Dropbox/Documents/10_year_2016/Coursera/Data Science/Practical Machine Learning Course/Prediction_Assignment_Writeup.R')
NAsRate <- apply(myTrainData,2,function(x) {mean(is.na(x))})
myTrainData1 <- myTrainData[,which(NAsRate >= 0.90 )]
myTrainData1
myTrainData1 <- myTrainData[,-which(NAsRate >= 0.90 )]
myTrainData1
str(myTrainData1)
source('D:/Dropbox/Documents/10_year_2016/Coursera/Data Science/Practical Machine Learning Course/Prediction_Assignment_Writeup.R')
modFitBoost <- train(classe ~. ,method = "glm" ,myTrainData, verbose = FALSE)
modFitDT <- rpart(classe ~. , myTrainData, method="class")
predDT <- predict(modFitDT, myTestData, type = "class")
confusionMatrix(predDT, myTestData$classe)
modFitRF <- randomForest(classe ~. ,myTrainData)
predRF <- predict(modFitRF, myTestData, type = "class")
confusionMatrix(predRF, myTestData$classe)
source('D:/Dropbox/Documents/10_year_2016/Coursera/Data Science/Practical Machine Learning Course/Prediction_Assignment_Writeup.R')
source('D:/Dropbox/Documents/10_year_2016/Coursera/Data Science/Practical Machine Learning Course/Prediction_Assignment_Writeup.R')
source('D:/Dropbox/Documents/10_year_2016/Coursera/Data Science/Practical Machine Learning Course/Prediction_Assignment_Writeup.R')
modFitBoost <- train(classe ~. ,data = myTrainData, method = "glm" ,verbose = FALSE)
controlGBM <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
modFitBoost <- train(classe ~. ,data = myTrainData, method = "glm" , trControl = controlGBM ,verbose = FALSE)
modFitBoost
modFitGBM  <- train(classe ~ ., data=myTrainData, method = "gbm",
trControl = controlGBM, verbose = FALSE)
modFitBoost <- train(classe ~. ,method = "gbm" ,myTrainData, verbose = FALSE)
modFitBoost <- train(classe ~. ,method = "gbm" ,myTrainData, verbose = FALSE)
rnorm(100)
x <- rnorm(100)
x1 <- rnorm(100)
x
x1
x2<-rnorm(100)
y <- x + x1 + x2
y
lm(y~.)
lm(y~)
lm(y ~ x)
lm(y ~.)
lm(y ~ x + x1 + x2)
lm(y ~ x + 2*x1 + x2)
lm(y ~ x + x1 + x2)
x1=x1*2
lm(y ~ x + x1 + x2)
resid(y)
resid(y, x1)
summary(model)
m1 = lm(y ~ x + x1 + x2)
summary(m1)
x1 = x2 *2
x <- rnorm(100)
x1 <- rnorm(100)
x2 <- rnorm(100)
y <- x + x1 + x2
m1 = lm(y ~ x + x1 + x2)
summary(m1)
m1
x1 = x1*2
y <- x + x1 + x2
m2 = lm(y ~ x + x1 + x2)
m2
x1
x1 = x1*2
y <- x + x1 + x2
m2 = lm(y ~ x + x1 + x2)
m2
cls
clear
x1 <- rnorm(1000)
x2 <- rnorm(1000)
x3 <- rnorm(1000)
y1 <- x1 + x2 + x3
y1 <- x1 + 2*x2 + x3
y1 <- x1 + x2 + x3
y2 <- x1 + 2*x2 + x3
lm(y1~x1+x2+x3)
lm(y2~x1+x2+x3)
m1 <- lm(y1~x1+x2+x3)
m2 <- lm(y2~x1+x2+x3)
summary(m1)
summary(m2)
install.packages("shiny")
p <- numeric(10)
p
p <- str(10)
p
p<-str("121313")
p
str("123")
install.package("devtool")
install.packages("devtool")
library(devtools)
library(devtools)
install.packages("devtool")
install.packages("devtools")
install_github('slidify', 'ramnathv')
install.packages('slidify')
install.packages("slidify")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(devtools)
library(devtools)
install.packages(digest)
library(devtools)
install.packages(devtools)
install.packages("devtools")
library(devtools)
library(devtools)
library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages('rsconnect')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
setwd("D:/Github/DevDataProjects")
library(rsconnect)
rsconnect::deployApp()
